    Vimos como tratar arquivos CSS como módulos e depois, mantê-los separados do bundle.js,
sendo a melhor opção importá-lo pela tag <link>.
    Porém, o que devemos fazer para importar scripts e tratá-los como módulos da aplicação.
    Normalmente, os scripts já são importados pela tag <script>.
    Nós não queremos fazer isso, porque queremos que o Webpack gere o bundle.js, e processe os módulos.

    Dentro do node_modules, temos a pasta bootstrap - que possui a dist, onde encontraremos vários plugins js do bootstrap.
    No caso vamos testar com o modal.js do bootstrap

    1 Importamos no app.js
import 'jquery/dist/jquery.js';
import 'bootstrap/js/modal.js';

    2 Como ele precisa do JQuery instalamos
- npm install jquery@3.2.1 --save

    Por algum motivo quando o modal é carregado o jQuery ainda não foi carregado, ele não está acessivel pelo bootstrap,
assim ele precisa estar no escopo global.


    Como faremos para disponibilizar o jquery de uma maneira que seja acessível por todos os módulos gerados no bundle.js.

    A solução será utilizar um plugin que já está embutido no Webpack: webpack.ProvidePlugin.
    Para isto, iremos importar o objeto que representa o webpack no webpack.config

- const webpack = require('webpack');

    A forma como disponibilizaremos o jQuery deve estar disponpivel tanto para ambiente de desenvolvimento como de produção, por isso,
adicionaremos abaixo do extractTextPlugin, push() com webpack.ProvidePlugin.

plugins.push(
    new webpack.ProvidePlugin({
            // O $ diz que vai estar disponivel para todos os modulos e passa o caminho e outro com o nome JQuery e passa o caminho
           '$': 'jquery/dist/jquery.js',
           'jQuery': 'jquery/dist/jquery.js'
    })

E retiramos o import de app.js
